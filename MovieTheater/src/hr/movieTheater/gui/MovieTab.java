/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.movieTheater.gui;

import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.movieTheater.customEvents.RefreshMovieTableInvoker;
import hr.movieTheater.customEvents.RefreshMovieTableInvokerSingleton;
import hr.movieTheater.customEvents.RefreshMovieTableListener;
import hr.movieTheater.log.LogHandler;
import hr.movieTheater.dal.Repository;
import hr.movieTheater.dal.RepositorySingleton;
import hr.movieTheater.gui.popUpDialog.MovieHandlerDialog;
import hr.movieTheater.gui.popUpDialog.ShowMovieDialog;
import hr.movieTheater.log.LogHandlerSingleton;
import hr.movieTheater.model.Movie;
import hr.movieTheater.model.MovieTableModel;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
/**
 *
 * @author Josip
 */
public class MovieTab extends javax.swing.JPanel implements RefreshMovieTableListener {

    private Repository repo;
    private LogHandler logHandler;
    
    private Optional<Movie> selectedMovie = Optional.empty();
    private int selectedRow = -1;
    
    private MovieTableModel movieTableModel;
    
    private RefreshMovieTableInvoker eventToRespont;
    
    /**
     * Creates new form MovieTab
     */
    public MovieTab() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tMovies = new javax.swing.JTable();
        lblPicture = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnUpdateMovie = new javax.swing.JButton();
        btnMoreDetails = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1150, 836));

        tMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tMovies);

        lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg"))); // NOI18N
        lblPicture.setText("ovdje je slika");

        jLabel1.setText("Opis: ");

        btnUpdateMovie.setText("Ažuriraj");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnMoreDetails.setText("Više detalja");
        btnMoreDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoreDetailsActionPerformed(evt);
            }
        });

        btnAddMovie.setText("Dodaj novi film");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setText("Obriši");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        tfPicturePath.setEditable(false);
        tfPicturePath.setText("picturePath");

        taDescription.setEditable(false);
        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setText("Ovo je text..\n");
        taDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(taDescription);

        jLabel2.setText("Naslov:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMoreDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMoreDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void tMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tMoviesMouseClicked

    private void btnMoreDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoreDetailsActionPerformed
        if (selectedRow != -1) {
            ShowMovieDialog movieDialog = new ShowMovieDialog((JFrame)SwingUtilities.getWindowAncestor(this), true, selectedMovie.get().getId());
            movieDialog.setVisible(true);
            updateTable();
            selectRow(selectedRow);
            showMovie();
        }
        else{
            MessageUtils.showInformationMessage("Korisnička greška", "potrebno je označiti film u tablici");
        }
    }//GEN-LAST:event_btnMoreDetailsActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        MovieHandlerDialog movieDialog = new MovieHandlerDialog((JFrame)SwingUtilities.getWindowAncestor(this), true);
        movieDialog.setVisible(true);
        updateTable();
        selectRow(tMovies.getRowCount()-1);
        showMovie();
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedRow != -1) {
            MovieHandlerDialog movieDialog = new MovieHandlerDialog((JFrame)SwingUtilities.getWindowAncestor(this), true, selectedMovie);
            movieDialog.setVisible(true);
            updateTable();
            selectRow(selectedRow);
            showMovie();
        }
        else{
            MessageUtils.showInformationMessage("Korisnička greška", "potrebno je označiti film u tablici");
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedRow == -1) {
            MessageUtils.showInformationMessage("Korisnička greška", "Potrebno je označiti film!");
        }
        else{
            boolean isOkToDeleteMovies = MessageUtils.showConfirmDialog("Jeste li sigurni", "Jeste li sigurni da želite obrisati film?") == 0;
            if (isOkToDeleteMovies) {
                try {
                    deleteOldPicture(selectedMovie.get().getPicturePath());
                    repo.deleteMovie(selectedMovie.get().getId());
                    MessageUtils.showInformationMessage("Sve je ok", "Film je uspješno obrisan.");
                    updateTable();
                    clearForm();
                } catch (SQLException ex) {
                    logHandler.log(ex.getMessage(), ex);
                    MessageUtils.showErrorMessage("Error br. 10", "Došlo je to problema tijekom brisanja podataka. Za pomoć obratite se adminu.");
                }catch (IOException ex) {
                    MessageUtils.showErrorMessage("Greška br. 50", "Došlo je do pogreške tijekom brisanj slike. Za pomoć obratite se adminu.");
                    logHandler.log(ex.getMessage(), ex);
                } catch (Exception ex) {
                    logHandler.log(ex.getMessage(), ex);
                    MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
                }
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    
    
    
    private void showMovie() {
        int movieId = getMovieIdFromTable();
        
        try {
            selectedMovie = repo.getMovie(movieId);
            if (selectedMovie.isPresent()) {
                fillForm(selectedMovie.get());
            }
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            Logger.getLogger(MovieTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
        
    }
    
    private void fillForm(Movie movie) {
        taDescription.setText(movie.getDescription());
        tfTitle.setText(movie.getTitle());
        
        if (movie.getPicturePath() != "" && Files.exists(Paths.get(movie.getPicturePath())) == true) {
            ImageIcon icon;
            try {
                icon = IconUtils.createIcon(movie.getPicturePath(), lblPicture.getWidth(), lblPicture.getHeight());
                lblPicture.setIcon(icon);
                tfPicturePath.setText(movie.getPicturePath());
            }catch (IOException ex) {
                Logger.getLogger(MovieTab.class.getName()).log(Level.SEVERE, null, ex);
                logHandler.log(ex.getMessage(), ex);
            }  catch (NullPointerException ex){
                logHandler.log(ex.getMessage(), ex);
                tfPicturePath.setText("Nije moguće ucitati sliku!");
                lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg")));
                MessageUtils.showInformationMessage("Upozorenje", "Nije moguće ucitati sliku!");
                Logger.getLogger(MovieTab.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
            }
        }
        else{
            tfPicturePath.setText("Nema slike!");
            lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg")));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnMoreDetails;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JTable tMovies;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initLogHandler();
            initTable();
            initEventListener();
        } catch (SQLException ex) {
            MessageUtils.showErrorMessage("Error br. 10", "Dogodila se pogleška tijekom dohavćanja podataka. Za pomoć obratite se adminu.");
            logHandler.log(ex.getMessage(), ex);
            Logger.getLogger(MovieTab.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
    }

    private void initTable() throws SQLException {
        tMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tMovies.setAutoCreateRowSorter(true);
        movieTableModel = new MovieTableModel(repo.getMovies(false));
        tMovies.setModel(movieTableModel);
    }
    
    private void initRepository() {
        repo = RepositorySingleton.getInstance();
    }

    private void initLogHandler() {
        logHandler = LogHandlerSingleton.getInstance();
    }

    private int getMovieIdFromTable() {
        selectedRow =  tMovies.getSelectedRow();
        return (int) tMovies.getValueAt(selectedRow, 0);
        
    }

    private void updateTable() {
        try {
            movieTableModel.setMovies(repo.getMovies(false));
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Greška br. 00", "Nije moguće osviježiti tablicu. Za pomoć obratite se adminu.");
            Logger.getLogger(MovieTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
    }

    private void selectRow(int sr) {
        tMovies.setRowSelectionInterval(0, sr);
    }

    private void initEventListener() {
        eventToRespont = RefreshMovieTableInvokerSingleton.getInstance();
        eventToRespont.addListener(this);
    }

    @Override
    public void refreshTableMovieTable() {
        updateTable();
        clearForm();
        selectedRow = -1;
    }

    private void clearForm() {
        taDescription.setText("");
        tfTitle.setText("");
        lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg")));
    }
    
    private void deleteOldPicture(String path) throws IOException {
        if (!Files.deleteIfExists(Paths.get(path))) {
            MessageUtils.showErrorMessage("Error br 80", "Nije moguće obrisati sliku");
        }
    }
}
