/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.movieTheater.gui.popUpDialog;

import hr.algebra.utils.MessageUtils;
import hr.movieTheater.dal.Repository;
import hr.movieTheater.dal.RepositorySingleton;
import hr.movieTheater.log.LogHandler;
import hr.movieTheater.log.LogHandlerSingleton;
import hr.movieTheater.model.Movie;
import hr.movieTheater.model.MovieTableModel;
import java.sql.SQLException;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Josip
 */
public class ShowAllMoviesDialog extends javax.swing.JDialog {

    private Repository repo;
    private LogHandler logHandler;
    
    private MovieTableModel tableModel;
    
    private Optional<Integer> idMovie;
    private Optional<Integer> idPerson;
    private Optional<Movie> movie;
    
    private java.awt.Frame parent;
    
    int selectedRowMovieTable;
    /**
     * Creates new form ShowAllMoviesDialog
     */
    public ShowAllMoviesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        idPerson = Optional.empty();
        init();
    }

    public ShowAllMoviesDialog(java.awt.Frame parent, boolean modal, Optional<Integer> idPerson) {
        super(parent, modal);
        initComponents();
        this.idPerson = idPerson;
        this.parent = parent;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbButtonContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tMovies = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbButtonContent.setPreferredSize(new java.awt.Dimension(990, 50));
        tbButtonContent.setLayout(new java.awt.GridLayout());

        tMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(tbButtonContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(tbButtonContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tMovies;
    private javax.swing.JPanel tbButtonContent;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initLogHandler();
        initRepository(); 
        initTable();
        initButtonPanel();
        setTitle("Prikaz svih filmova");
        
    }
    
    private void initButtonPanel() {
        if (idPerson.isPresent()) {
            //client user
            tbButtonContent.add(new ClientUserButtonPanelForShowAllMoviesDialog(this));
        }
        else{
            //admin user
            tbButtonContent.add(new AdminUserButtonPanelForShowAllMoviesDialog(this));
        }
    }

    private void initLogHandler() {
        logHandler = LogHandlerSingleton.getInstance();
    }

    private void initRepository() {
        repo = RepositorySingleton.getInstance();
    }

    private void initTable() {
        tMovies.setAutoCreateRowSorter(true);
        tMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        try {
            tableModel = new MovieTableModel(repo.getMovies(false));
            tMovies.setModel(tableModel);
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 10", "Došlo je to problema tijekom dohvačanja podataka za tablicu. Za pomoć obratite se adminu.");
            Logger.getLogger(ShowAllMoviesDialog.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
    }

    Optional<Integer> getPersonId(){
        return idPerson;
    }
    
    Optional<Integer> getMovieId(){
        idMovie = getMovieIdFromTable();
        return idMovie;
    }

    void updateTable(){
        try {
            tableModel.setMovies(repo.getMovies(false));
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 10", "Došlo je to problema tijekom dohvačanja podataka za tablicu. Za pomoć obratite se adminu.");
            Logger.getLogger(ShowAllMoviesDialog.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
        
    }

    java.awt.Frame getParentFrame(){
        return parent;
    }
    
    private Optional<Integer> getMovieIdFromTable() {
        selectedRowMovieTable = tMovies.getSelectedRow();
        if (selectedRowMovieTable == -1) {
            return Optional.empty();
        }   
        return Optional.of(Integer.valueOf((int) tMovies.getValueAt(selectedRowMovieTable, 0)));
    }
    
}

