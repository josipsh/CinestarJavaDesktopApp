/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.movieTheater.gui.popUpDialog;


import hr.movieTheater.model.Actor;
import hr.movieTheater.model.Director;
import hr.movieTheater.model.Genre;
import hr.movieTheater.model.Person;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 *
 * @author Josip
 */
public class DragAndDropDialog extends javax.swing.JDialog {

    private MovieHandlerDialog parentDialog;
    private MovieHandlerPanel parent;
    
    Optional<Person> personOpt;
    private List<Person> persons; 
    
    private List<Genre> genres;
    private List<Actor> actors;
    private List<Director> directors;
    
    /**
     * Creates new form DragAndDropDialog
     */
    public DragAndDropDialog(java.awt.Dialog parent, boolean modal, Optional<Person> person) {
        super(parent, modal);
        this.parentDialog = (MovieHandlerDialog) parent;
        this.personOpt = person;
        initComponents();
        init();
    }
    public DragAndDropDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        this.parentDialog = (MovieHandlerDialog) parent;
        this.personOpt = Optional.empty();
        initComponents();
        init();
    }
    

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbContent = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbContent.setLayout(new java.awt.GridLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbContent, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbContent, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel tbContent;
    // End of variables declaration//GEN-END:variables

    private void init() {
        parent = parentDialog.getChildPanel();
        persons = new ArrayList<>();
        initPanel();
        
    }

    private void initPanel() {
        if (personOpt.isPresent()) {
            boolean isPersonActor = personOpt.get() instanceof Actor;
            if (isPersonActor) {
                setTitle("Promjeni glumce");
                actors = parent.getActors();
                DragAndDropPersonPanel panel = new DragAndDropPersonPanel(this, getPersons());
                panel.setVisible(true);
                tbContent.add(panel);
                
            }
            else{
                setTitle("Promjeni režisere");
                directors = parent.getDirectors();
                DragAndDropPersonPanel panel = new DragAndDropPersonPanel(this, getPersons());
                tbContent.add(panel);
                panel.setVisible(true);
                
            }
        }
        else{
            setTitle("Promjeni žanr");
            genres = parent.getGenres();
            DragAndDropGenrePanel panel = new DragAndDropGenrePanel(this, genres);
            tbContent.add(panel);
            panel.setVisible(true);
            
        }
    }

    public void setGenres(List<Genre> genres){
        this.genres = genres;
    } 

    private List<Person> getPersons(){
        persons.clear();
        if (personOpt.isPresent()) {
            boolean isPersonActor = personOpt.get() instanceof Actor;
            if (isPersonActor) {
                actors.forEach(a -> persons.add(new Person(
                        a.getId(), 
                        a.getFirstName(), 
                        a.getMiddleName(), 
                        a.getLastName()
                )));
            }
            else{
                directors.forEach(a -> persons.add(new Person(
                        a.getId(), 
                        a.getFirstName(), 
                        a.getMiddleName(), 
                        a.getLastName()
                )));
            }
        }
        return persons;
    } 

    public void setPersons(List<Person> persons){
        this.persons = persons;
    } 
    
    public void saveData(){
        if (personOpt.isPresent()) {
            boolean isPersonActor = personOpt.get() instanceof Actor;
            if (isPersonActor) {
                convertPerosns();
                parent.setActors(actors);
            }
            else{
                convertPerosns();
                parent.setDirectors(directors);
            }
        }
        else{
            parent.setGenres(genres);
        }
    }

    private void convertPerosns() {
        if (personOpt.isPresent()) {
            boolean isPersonActor = personOpt.get() instanceof Actor;
            if (isPersonActor) {
                actors.clear();
                persons.forEach(p -> actors.add(new Actor(
                        p.getId(), 
                        p.getFirstName(), 
                        p.getMiddleName(), 
                        p.getLastName()
                )));
                
            }
            else{
                directors.clear();
                persons.forEach(p -> directors.add(new Director(
                        p.getId(), 
                        p.getFirstName(), 
                        p.getMiddleName(), 
                        p.getLastName()
                )));
            }
        }
    }

}
