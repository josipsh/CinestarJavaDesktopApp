/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.movieTheater.gui.popUpDialog;

import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.movieTheater.DirectoryInformationHandler;
import hr.movieTheater.log.LogHandler;
import hr.movieTheater.log.LogHandlerSingleton;
import hr.movieTheater.model.Actor;
import hr.movieTheater.model.Director;
import hr.movieTheater.model.Genre;
import hr.movieTheater.model.Movie;
import java.awt.Dialog;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Josip
 */
public class MovieHandlerPanel extends javax.swing.JPanel {

    LogHandler logHandler;
    
    //private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ISO_DATE;
    
    private DefaultListModel<Actor> actorListModel;
    private DefaultListModel<Director> directorListModel;
    private DefaultListModel<Genre> genreListModel;
    
    private List<Actor> actors;
    private List<Director> directors;
    private List<Genre> genres;
    
    private final Random RANDOM = new Random();
    private final String ASSET_DIRECTORY  = DirectoryInformationHandler.getAssetDirectory();
    
    private List<JTextComponent> textFields;
    private List<JLabel> errorLabels;
    
    private MovieHandlerDialog parent;
    
    private Optional<Movie> movie;
    private int movieId = 0;
    /**
     * Creates new form MovieHandlerPanel
     */
    public MovieHandlerPanel(javax.swing.JDialog parent, Optional<Movie> movie) {
        initComponents();
        this.parent = (MovieHandlerDialog) parent;
        this.movie = movie;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDuraton = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lblPicture = new javax.swing.JLabel();
        lblTitleError = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        lblPublishedDateError = new javax.swing.JLabel();
        lblStartDateError = new javax.swing.JLabel();
        lblOriginalTitleError = new javax.swing.JLabel();
        lblDurationError = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnChosePicture = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList();
        btnChangeGenre = new javax.swing.JButton();
        btnChangeActors = new javax.swing.JButton();
        btnChangeDirectors = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblPicturePathError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(930, 750));

        jLabel1.setText("Naslov:");

        jLabel2.setText("Orginalni naslov:");

        jLabel3.setText("Trajanje");

        tfDuraton.setName("Duration"); // NOI18N

        jLabel4.setText("Datum objave:");

        tfPublishedDate.setToolTipText("");
        tfPublishedDate.setName("Date"); // NOI18N

        jLabel5.setText("Dostupno u kinima:");

        tfStartDate.setName("Date"); // NOI18N

        jLabel6.setText("Opis:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescription);

        lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg"))); // NOI18N
        lblPicture.setText("jLabel7");
        lblPicture.setPreferredSize(new java.awt.Dimension(190, 350));

        lblTitleError.setForeground(new java.awt.Color(255, 51, 51));
        lblTitleError.setText("X");

        lblDescriptionError.setForeground(new java.awt.Color(255, 51, 51));
        lblDescriptionError.setText("X");

        lblPublishedDateError.setForeground(new java.awt.Color(255, 51, 51));
        lblPublishedDateError.setText("X");

        lblStartDateError.setForeground(new java.awt.Color(255, 51, 51));
        lblStartDateError.setText("X");

        lblOriginalTitleError.setForeground(new java.awt.Color(255, 51, 51));
        lblOriginalTitleError.setText("X");

        lblDurationError.setForeground(new java.awt.Color(255, 51, 51));
        lblDurationError.setText("X");

        tfPicturePath.setEditable(false);

        btnChosePicture.setText("Odaberi sliku");
        btnChosePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChosePictureActionPerformed(evt);
            }
        });

        jLabel7.setText("Žanr:");

        jLabel8.setText("Glumci:");

        jLabel9.setText("Režiseri:");

        jScrollPane2.setViewportView(lsActors);

        jScrollPane3.setViewportView(lsGenres);

        jScrollPane4.setViewportView(lsDirectors);

        btnChangeGenre.setText("Promjeni");
        btnChangeGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeGenreActionPerformed(evt);
            }
        });

        btnChangeActors.setText("Promjeni");
        btnChangeActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActorsActionPerformed(evt);
            }
        });

        btnChangeDirectors.setText("Promjeni");
        btnChangeDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeDirectorsActionPerformed(evt);
            }
        });

        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Spremi");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblPicturePathError.setForeground(new java.awt.Color(255, 51, 51));
        lblPicturePathError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel7)
                .addGap(273, 273, 273)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(248, 248, 248))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(96, 96, 96)
                                                .addComponent(jLabel6)
                                                .addGap(22, 22, 22))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGap(18, 18, 18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                                .addComponent(tfDuraton)
                                                .addComponent(tfPublishedDate)
                                                .addComponent(tfStartDate)
                                                .addComponent(tfOriginalTitle)))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(125, 125, 125)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnChosePicture))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addComponent(lblPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnChangeGenre)
                        .addGap(209, 209, 209)
                        .addComponent(btnChangeActors)
                        .addGap(242, 242, 242)
                        .addComponent(btnChangeDirectors)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDuraton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChosePicture)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangeGenre)
                            .addComponent(btnChangeActors)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChangeDirectors)
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(295, 295, 295))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        boolean ok = true;
        //Handle data before closing pop up window
        if (isFormGood()) {
            try {
                if (!tfPicturePath.getText().trim().equals(movie.get().getPicturePath()) && movie.get().getPicturePath() != "") {
                    deleteOldPicture();
                }
                
                if (!getDataFromForm()) {
                    ok = false;
                }
                parent.saveData(movie);
            } catch (SQLException ex) {
                MessageUtils.showErrorMessage("Greška br. 10", "Došlo je do pogreške. Za pomoć obratite se adminu.");
                logHandler.log(ex.getMessage(), ex);
                ok = false;
                Logger.getLogger(MovieHandlerPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MovieHandlerPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Greška br. 50", "Došlo je do pogreške tijekom brisanj slike. Za pomoć obratite se adminu.");
                logHandler.log(ex.getMessage(), ex);
            }catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
            }
        }
        else{
            ok = false;
        }
        
        if (ok) {
            parent.dispose();
        }
        
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        parent.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnChosePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChosePictureActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        loadPicture(file.getAbsolutePath());
        
    }//GEN-LAST:event_btnChosePictureActionPerformed

    private void btnChangeGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeGenreActionPerformed
        new DragAndDropDialog((Dialog) this.getParent().getParent().getParent().getParent().getParent(), true).setVisible(true);
    }//GEN-LAST:event_btnChangeGenreActionPerformed

    private void btnChangeActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActorsActionPerformed
        new DragAndDropDialog((Dialog) this.getParent().getParent().getParent().getParent().getParent(), true, Optional.of(new Actor())).setVisible(true);
    }//GEN-LAST:event_btnChangeActorsActionPerformed

    private void btnChangeDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeDirectorsActionPerformed
        new DragAndDropDialog((Dialog) this.getParent().getParent().getParent().getParent().getParent(), true, Optional.of(new Director())).setVisible(true);
    }//GEN-LAST:event_btnChangeDirectorsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangeActors;
    private javax.swing.JButton btnChangeDirectors;
    private javax.swing.JButton btnChangeGenre;
    private javax.swing.JButton btnChosePicture;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblPicturePathError;
    private javax.swing.JLabel lblPublishedDateError;
    private javax.swing.JLabel lblStartDateError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList lsActors;
    private javax.swing.JList lsDirectors;
    private javax.swing.JList lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfDuraton;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initLogHandler();
        initListModels();
        initValidationFields();
        clearErrorLabels();
        if (movie.isPresent()) {
            fillForm();
            movieId = movie.get().getId();
        }
        else{
            initGenresActorsAndDirectors();
        }
    }

    private void initLogHandler() {
        logHandler = LogHandlerSingleton.getInstance();
    }

    private void initListModels() {
        genreListModel = new DefaultListModel<>();
        actorListModel = new DefaultListModel<>();
        directorListModel = new DefaultListModel<>();
    }

    private void initValidationFields() {
        textFields = Arrays.asList(tfTitle, tfOriginalTitle, taDescription, tfPublishedDate, tfStartDate, tfDuraton,tfPicturePath);
        errorLabels = Arrays.asList(lblTitleError, lblOriginalTitleError, lblDescriptionError, lblPublishedDateError, lblStartDateError, lblDurationError, lblPicturePathError);
        //tfPublishedDate.setText("yyyy-MM-ddThh:mm:ss");
        //tfStartDate.setText("yyyy-MM-ddThh:mm:ss");
    }
    
    private void clearErrorLabels() {
        for (JLabel label : errorLabels) {
            label.setText("");
        }
    }
    
    private void initGenresActorsAndDirectors() {
        actors = new ArrayList<>();
        directors = new ArrayList<>();
        genres = new ArrayList<>();
    }
    
    private void fillForm() {
        tfTitle.setText(movie.get().getTitle());
        tfOriginalTitle.setText(movie.get().getOriginalTitle());
        taDescription.setText(movie.get().getDescription());
        tfPublishedDate.setText(movie.get().getPublishedDate().format(Movie.DATE_FORMAT));
        tfStartDate.setText(movie.get().getStartDate().format(Movie.DATE_FORMAT));
        tfDuraton.setText(String.valueOf(movie.get().getDuration()));
        tfPicturePath.setText(movie.get().getPicturePath());
        actors = movie.get().getActors();
        directors = movie.get().getDirectors();
        genres = movie.get().getGenre();
        loadModels();
        loadPicture(movie.get().getPicturePath());
    }
    
    private void loadModels() {
        loadActorModel();
        loadDirectorModel();
        loadGenreModel();
    }

    private void loadActorModel() {
        actorListModel.clear();
        actors.forEach(a -> actorListModel.addElement(a));
        
        lsActors.setModel(actorListModel);
    }

    private void loadDirectorModel() {
        
        directorListModel.clear();
        directors.forEach(d -> directorListModel.addElement(d));
        lsDirectors.setModel(directorListModel);
    }

    private void loadGenreModel() {
        genreListModel.clear();
        genres.forEach(g -> genreListModel.addElement(g));
        lsGenres.setModel(genreListModel);
    }
    
    private void loadPicture(String picturePath) {
        if (picturePath != null && Files.exists(Paths.get(picturePath)) == true) {
            
            ImageIcon icon;
            try {
                icon = IconUtils.createIcon(picturePath, lblPicture.getPreferredSize().width, lblPicture.getPreferredSize().height);

                lblPicture.setIcon(icon);
            }catch (IOException ex) {
                logHandler.log(ex.getMessage(), ex);
            } catch (NullPointerException ex){
                logHandler.log(ex.getMessage(), ex);
                tfPicturePath.setText("Nije moguće ucitati sliku!");
                lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg")));
                MessageUtils.showInformationMessage("Upozorenje", "Nije moguće ucitati sliku!");
            }catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
            }
        }
        else{
            tfPicturePath.setText("Nema slike!");
        }
    }
    
    private boolean isFormGood(){
        boolean ok = true;
        boolean dateGood = true;
        
        for (int i = 0; i < textFields.size(); i++) {
            if (textFields.get(i).getText().trim().isEmpty()) {
                ok = false;
                errorLabels.get(i).setText("X");
            }
            else{
                errorLabels.get(i).setText("");
            }
            
            if ("Date".equals(textFields.get(i).getName())) {
                try {
                    LocalDate.parse(textFields.get(i).getText().trim(), Movie.DATE_FORMAT);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    dateGood = false;
                    logHandler.log(e.getMessage(), e);
                    errorLabels.get(i).setText("X");
                }
            }
            
            if ("Duration".equals(textFields.get(i).getName())) {
                try {
                    Integer.parseInt(textFields.get(i).getText().trim());
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                    MessageUtils.showInformationMessage("Neispravni unos", "U polje 'Trajanje' potrebno je upisati broj!");
                }
            }
        }
        
        if (!dateGood) {
            MessageUtils.showInformationMessage("Neispravni unos", "Datum je potrebno upisati u sljedećem formatu: 'yyyy-MM-dd'!");
        }
        
        return ok;
    }

    private boolean getDataFromForm() {
        String picturePath = copyPictureToAssetDirectory();
        if (picturePath == "") {
            return false;
        }
        movie = Optional.of(new Movie(
                movieId,
                tfTitle.getText().trim(), 
                tfOriginalTitle.getText().trim(), 
                taDescription.getText().trim(), 
                LocalDate.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMAT), 
                LocalDate.parse(tfStartDate.getText().trim(), Movie.DATE_FORMAT), 
                Integer.parseInt(tfDuraton.getText().trim()), 
                picturePath, 
                getGenresFromModel(), 
                getActorsFromModel(), 
                getDirectorsFromModel()
        ));

        return true;
    }
    
    private List<Genre> getGenresFromModel() {
        genres.clear();
        if (!genreListModel.isEmpty()) {
            for (int i = 0; i < genreListModel.size(); i++) {
                genres.add(genreListModel.getElementAt(i));
            }
        }
        return genres;
    }

    private List<Actor> getActorsFromModel() {
        actors.clear();
        if (!actorListModel.isEmpty()) {
            for (int i = 0; i < actorListModel.size(); i++) {
                actors.add(actorListModel.getElementAt(i));
            }
        }
        return actors;
    }

    private List<Director> getDirectorsFromModel() {
        directors.clear();
        
        if (!directorListModel.isEmpty()) {
            for (int i = 0; i < directorListModel.size(); i++) {
                directors.add(directorListModel.getElementAt(i));
            }
        }
        return directors;
    }

    private String copyPictureToAssetDirectory() {
        String source = tfPicturePath.getText().trim();
        if (source == "") {
            return "";
        }
        if (source.equals(movie.get().getPicturePath())) {
            return movie.get().getPicturePath();
        }
        String ext = source.substring(source.lastIndexOf('.'));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String destination = ASSET_DIRECTORY + File.separator + pictureName;
        
        try {
            FileUtils.copy(source, destination);
        } catch (IOException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 20", "Nije moguće kopirati sliku u Asset folder! Za pomoć obratite se adminu.");
            Logger.getLogger(MovieHandlerPanel.class.getName()).log(Level.SEVERE, null, ex);
            return "";
        }catch (Exception ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
        return destination;
    }

    public List<Genre> getGenres(){
        return getGenresFromModel();
    } 

    public List<Actor> getActors(){
        return getActorsFromModel();
    } 

    public List<Director> getDirectors(){
        return getDirectorsFromModel();
    } 
    
    public void setGenres(List<Genre> genres){
        if (genres != null) {
            this.genres  = genres;
            loadGenreModel();
        }
    }
    
    public void setActors(List<Actor> actors){
        if (actors != null) {
            this.actors  = actors;
            loadActorModel();
        }
    }
    
    public void setDirectors(List<Director> directors){
        if (directors != null) {
            this.directors  = directors;
            loadDirectorModel();
        }
    }

    private void deleteOldPicture() throws IOException {
        if (!Files.deleteIfExists(Paths.get(movie.get().getPicturePath()))) {
            MessageUtils.showErrorMessage("Error br 80", "Nije moguće obrisati sliku");
        }
    }






    
    
}
