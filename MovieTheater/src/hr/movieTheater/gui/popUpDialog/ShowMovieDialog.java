/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.movieTheater.gui.popUpDialog;

import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.movieTheater.dal.Repository;
import hr.movieTheater.dal.RepositorySingleton;
import hr.movieTheater.gui.MainForm;
import hr.movieTheater.log.LogHandler;
import hr.movieTheater.log.LogHandlerSingleton;
import hr.movieTheater.model.Actor;
import hr.movieTheater.model.Director;
import hr.movieTheater.model.Genre;
import hr.movieTheater.model.Movie;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

/**
 *
 * @author Josip
 */
public class ShowMovieDialog extends javax.swing.JDialog {

    private Movie movie;
    private MainForm parent;
    private int idMovie;
    
    private DefaultListModel<Actor> actorListModel;
    private DefaultListModel<Director> directorListModel;
    private DefaultListModel<Genre> genreListModel;
    
    private LogHandler logHandler;
    private Repository repo;
    /**
     * Creates new form ShowMovieDialog
     */
    public ShowMovieDialog(java.awt.Frame parent, boolean modal, int idMovie) {
        super(parent, modal);
        this.idMovie = idMovie;
        this.parent = (MainForm) parent;
        initComponents();
        init();
        ShowMovie();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lblPicture = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList();
        btnClose = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Naslov:");

        tfTitle.setEditable(false);

        jLabel2.setText("Orginalni naslov");

        tfOriginalTitle.setEditable(false);

        tfPublishedDate.setEditable(false);

        jLabel3.setText("Datum objave:");

        jLabel4.setText("Dostupno u kinima:");

        tfStartDate.setEditable(false);

        jLabel5.setText("Trajanje: (minute)");

        tfDuration.setEditable(false);

        jLabel6.setText("Opis:");

        taDescription.setEditable(false);
        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescription);

        lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg"))); // NOI18N

        jLabel7.setText("Žanr:");

        jLabel8.setText("Glumci:");

        jLabel9.setText("Režiseri:");

        jScrollPane2.setViewportView(lsDirectors);

        jScrollPane3.setViewportView(lsGenres);

        jScrollPane4.setViewportView(lsActors);

        btnClose.setText("Zatvori");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnUpdate.setText("Ažuriraj");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(192, 192, 192)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfTitle)
                                    .addComponent(tfOriginalTitle)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tfStartDate, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(tfDuration))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8))
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        new MovieHandlerDialog(parent, true, Optional.of(movie)).setVisible(true);
        try {
            movie = repo.getMovie(idMovie).get();
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 10", "Nije moguće dohvatiti podatke. za pomoć obratite se adminu.");
            Logger.getLogger(ShowMovieDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
        ShowMovie();
    }//GEN-LAST:event_btnUpdateActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JList lsActors;
    private javax.swing.JList lsDirectors;
    private javax.swing.JList lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        this.setTitle("Prikaz filma");
        initLogHandler();
        initRepository();
        initData();
        initModels();
    }
    private void initLogHandler() {
        logHandler = LogHandlerSingleton.getInstance();
    }
    private void initRepository() {
        repo = RepositorySingleton.getInstance();
    }
    
    private void initData() {
        try {
            movie = repo.getMovie(idMovie).get();
        } catch (SQLException ex) {
            logHandler.log(ex.getMessage(), ex);
            MessageUtils.showErrorMessage("Error br. 10", "Došlo je do pogleške za vrijem edohvaćanja podataka. Za pomoć obratite se adminu.");
            Logger.getLogger(ShowMovieDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
        }
    }

    private void initModels() {
        genreListModel = new DefaultListModel<>();
        actorListModel = new DefaultListModel<>();
        directorListModel = new DefaultListModel<>();
    }
    
    private void ShowMovie() {
        tfTitle.setText(movie.getTitle());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        taDescription.setText(movie.getDescription());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMAT));
        tfStartDate.setText(movie.getStartDate().format(Movie.DATE_FORMAT));
        tfDuration.setText(movie.getDuration() == 0 ? "Nema ispravnog podatka!":String.valueOf(movie.getDuration()));
        
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath())) == true) {
            
            ImageIcon icon;
            try {
                icon = IconUtils.createIcon(movie.getPicturePath(), lblPicture.getWidth(), lblPicture.getHeight());
                lblPicture.setIcon(icon);
            }catch (IOException ex) {
                logHandler.log(ex.getMessage(), ex);
            }  catch (NullPointerException ex){
                logHandler.log(ex.getMessage(), ex);
                lblPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/movieTheater/Dafault.jpg")));
                MessageUtils.showInformationMessage("Upozorenje", "Nije moguće ucitati sliku!");
            } catch (Exception ex) {
                logHandler.log(ex.getMessage(), ex);
                MessageUtils.showErrorMessage("Error br. 100", "Došlo je do nepoznate pogreške. Javite se adminu.");
            }
        }

        loadGenreModel();
        loadActorModel();
        loadDirectorModel();
        
    }

    private void loadGenreModel() {
        List<Genre> genres = movie.getGenre();
        genreListModel.clear();
        genres.forEach(g -> genreListModel.addElement(g));
        lsGenres.setModel(genreListModel);
    }

    private void loadActorModel() {
        List<Actor> actors = movie.getActors();
        actorListModel.clear();
        actors.forEach(a -> actorListModel.addElement(a));
        lsActors.setModel(actorListModel);
    }

    private void loadDirectorModel() {
        List<Director> directors = movie.getDirectors();
        directorListModel.clear();
        directors.forEach(d -> directorListModel.addElement(d));
        lsDirectors.setModel(directorListModel);
    }


}
